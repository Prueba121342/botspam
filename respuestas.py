import random
from datetime import datetime, timedelta
from telethon import TelegramClient, events
from telethon.tl.types import ChannelParticipantsAdmins
from config import OWNER_ID
from manejador_grupos import obtener_todos_grupos
import asyncio

# Diccionario para rastrear la √∫ltima vez que se respondi√≥ a un usuario
ultimo_mensaje = {}

# Diccionario con respuestas autom√°ticas para mensajes privados basados en palabras clave
respuestas_privadas = {
    "ayuda": ["Hola! ¬øEn qu√© puedo ayudarte?", "Escr√≠beme los detalles y te ayudo con gusto."],
    "info": ["¬øQu√© tipo de informaci√≥n necesitas?", "Puedes consultarme sobre cualquier duda que tengas."],
    "precio": ["Los precios var√≠an, ¬øqu√© es lo que te interesa?", "Cont√°ctame en privado para m√°s detalles sobre precios @reigenpe."],
    "gracias": ["¬°De nada!", "¬°Siempre a tu servicio!"],
    "dox": ["Claro, ¬øqu√© informaci√≥n necesitas? Escribe 'dosing' para ver la lista", "Soy el mejor para esto. Escribe 'dosing' para ver la lista."],
    "netflix": ["Claro, un perfil para un dispositivo cuesta 8 soles y un perfil para dos dispositivos cuesta 13 soles. Cuenta completa plan premium a 30", "S√≠, tengo amigo, para un dispositivo cuesta 8 soles y para dos dispositivos cuesta 13 soles. Ten en cuenta que son perfiles."],
    "cuenta completa netflix": ["Claro amigo", "S√≠, tengo."],
    "prime video": ["El perfil cuesta 6 soles", "S√≠, tengo."],
    "servicios": ["üåü *¬°Servicios disponibles!* üåü\nüé¨ **Netflix Premium**\nüé• **Prime Video**\nüïµÔ∏è‚Äç‚ôÇÔ∏è **Doxing**\nü§ñ **Bot para Doxing**\nüëç **Seguidores, Likes, Vistas y M√°s**\nüí• **Bot para Spam**\nüíª **Programaci√≥n Personalizada**\nüì∫ **YouTube Premium**\nüí≥ **Curso de Carding y M√©todo Marathon**\nüéØ **Grupo de Fijas VIP y Grupo VIP**\nüîê **Cuenta Completa Netflix**\n‚ú® *¬°Cont√°ctame para m√°s informaci√≥n!* ‚ú®"],
    "dosing": ["üîç *Servicios de Informaci√≥n y Doxing* üîç\nüìÑ **C4 Azul**\nüìù **Ficha de Inscripci√≥n**\n‚öñÔ∏è **Antecedentes Judiciales, Penales y Policiales**\nüÜî **DNI Virtual (Ambas Caras)**\nüìû **Informaci√≥n de N√∫meros**\nüîç **B√∫squeda de N√∫meros por DNI**\n‚öñÔ∏è **Casos MPFN**\nüè† **Personas que Viven en un Hogar**\nüå≥ **√Årbol Geneal√≥gico**\nüì∏ **Fotos e Informaci√≥n de Personas**\nüì≤ **Titular de N√∫meros**\nüõ†Ô∏è **Y Otros Servicios de Investigaci√≥n**\n‚ú® *¬°Consulta para m√°s detalles!* ‚ú®"]
}

# Funci√≥n para verificar el estado del usuario en los grupos donde el bot est√° presente
async def verificar_usuario_en_grupos(client, user_id):
    grupos = obtener_todos_grupos()
    num_admin = 0
    num_no_admin = 0

    for grupo in grupos:
        try:
            # Obtener lista de administradores del grupo
            administradores = await client.get_participants(grupo["id"], filter=ChannelParticipantsAdmins)

            # Verificar si el usuario es administrador en el grupo
            es_admin = any(admin.id == user_id for admin in administradores)
            if es_admin:
                num_admin += 1
            else:
                num_no_admin += 1
        except Exception as e:
            print(f"No se pudo obtener informaci√≥n del grupo {grupo.get('name', 'Desconocido')}: {str(e)}")
            continue

    return num_admin, num_no_admin

# Funci√≥n para enviar la notificaci√≥n al owner
async def enviar_notificacion_al_owner(client, owner_id, mensaje, detalles_usuario, estado_resumen):
    notificacion = (
        f"üì© **Nuevo mensaje recibido** üì©\n\n"
        f"üîπ *Mensaje:* {mensaje}\n\n"
        f"üîπ *Detalles del usuario:* \n{detalles_usuario}\n\n"
        f"üîπ *Estado en los grupos:* \n{estado_resumen}"
    )
    try:
        await client.send_message(owner_id, notificacion)
    except Exception as e:
        print(f"Error al enviar la notificaci√≥n al owner: {str(e)}")

# Funci√≥n para manejar mensajes privados
async def manejar_mensaje_privado(event):
    user_id = event.sender_id
    mensaje = event.message.message.lower().strip()
    ahora = datetime.now()

    # Si el mensaje es del owner, no responder autom√°ticamente
    if user_id == OWNER_ID:
        return

    # Verificar si han pasado al menos 8 minutos desde la √∫ltima respuesta
    if user_id not in ultimo_mensaje or (ahora - ultimo_mensaje[user_id]) >= timedelta(minutes=8):
        # Actualizar el tiempo de la √∫ltima respuesta
        ultimo_mensaje[user_id] = ahora

        # Agregar un retraso de 2 segundos antes de responder
        await asyncio.sleep(2)

        # Responder al usuario con el mensaje inicial
        await event.reply("Espero que tengas un buen d√≠a. Espera un momento que ahora @reigenpe te escribir√° o escr√≠bele directamente. Aqu√≠ est√°n sus referencias: @RefsLegacy. ¬øQu√© se le ofrece o qu√© servicio desea? ")
        
        # Obtener detalles del usuario
        try:
            usuario = await event.client.get_entity(user_id)
            detalles_usuario = f"ID: {usuario.id}\nUsername: @{usuario.username if usuario.username else 'No disponible'}\nNombre: {usuario.first_name if usuario.first_name else 'No disponible'}\n"
        except Exception as e:
            detalles_usuario = f"No se pudo obtener detalles del usuario: {str(e)}"

        # Verificar estado del usuario en todos los grupos
        num_admin, num_no_admin = await verificar_usuario_en_grupos(event.client, user_id)
        estado_resumen = f"Es admin en {num_admin} grupo(s) y no es admin en {num_no_admin} grupo(s)."

        # Enviar notificaci√≥n al owner
        await enviar_notificacion_al_owner(event.client, OWNER_ID, mensaje, detalles_usuario, estado_resumen)

       # Responder seg√∫n palabras clave, incluso si ya se envi√≥ el mensaje predefinido
    for clave, respuestas in respuestas_privadas.items():
        if clave in mensaje:
            if clave == "pago":
                # Enviar el QR con el mensaje
                qr_file_path = "qr.png"  # Ruta donde est√° almacenada la imagen QR
                texto_adicional = "Escanea esto con tu billetera digital, verifica nombre y monta y paga."
                await event.reply(texto_adicional)
                await event.reply(file=qr_file_path)
            else:
                respuesta = random.choice(respuestas)
                await asyncio.sleep(3)  # A√±adir un retraso de 3 segundos antes de responder
                await event.reply(respuesta)
            break

# Conectar el manejador al evento de mensajes privados
def iniciar_manejador_privado(client: TelegramClient):
    @client.on(events.NewMessage(incoming=True))
    async def nuevo_mensaje_privado(event):
        if event.is_private:
            await manejar_mensaje_privado(event)
